package bulk;

import java.io.*;
import java.util.Iterator;
import org.apache.commons.io.FileUtils;
import org.apache.http.HttpHost;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.bulk.BulkRequest;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.unit.TimeValue;
import org.json.JSONObject;


public class bulkindex {
	public static void main(String args[]) throws IOException {
		long startTime = System.currentTimeMillis();	
		parseJson();
		long endTime = System.currentTimeMillis();
		System.out.println("Program running time: " + (endTime - startTime) + "ms");
	}
	
	public static void parseJson() throws IOException {
		RestHighLevelClient client = new RestHighLevelClient(
		        RestClient.builder(
		                new HttpHost("localhost", 9200, "http")));
		
		try {
			File file = new File("bookkeeping.json");
			String bookKeeping = FileUtils.readFileToString(file);	
			JSONObject obj = new JSONObject(bookKeeping);	
			
			Iterator<String> iterator = obj.keySet().iterator();
			int count = 0;
			while(iterator.hasNext()) {
				String obj_key = iterator.next();
				
				IndexRequest indexRequest = new IndexRequest("se221", "_doc", String.valueOf(count))  
				        .source("filename", obj_key,
				                "link", obj.getString(obj_key),
				                "content", FileUtils.readFileToString(new File("webpages_clean/" + obj_key), "UTF-8"));
				
				indexRequest.timeout(TimeValue.timeValueSeconds(300));
				
				IndexResponse indexResponse = client.index(indexRequest);
				System.out.println(++count);
			}		
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			client.close();
		}

//		index using bulk API:
		
//		try {
//			File file = new File("bookkeeping.json");
//			String bookKeeping = FileUtils.readFileToString(file);	
//			JSONObject obj = new JSONObject(bookKeeping);	
//			
//			BulkRequest request = new BulkRequest(); 
//			
//			Iterator<String> iterator = obj.keySet().iterator();
//			int count = 0;
//			while(iterator.hasNext()) {
//				if (++count % 100 == 0) System.out.println("current processed: " + count);
//				String obj_key = iterator.next();
//				
//				request.add(new IndexRequest("se221", "_doc", String.valueOf(count))  
//				        .source("filename", obj_key,
//				                "link", obj.getString(obj_key),
//				                "content", FileUtils.readFileToString(new File("webpages_clean/" + obj_key))));
//			}	
//			
//			request.timeout(TimeValue.timeValueMinutes(60));
//			
//			ActionListener<BulkResponse> listener = new ActionListener<BulkResponse>() {
//			    @Override
//			    public void onResponse(BulkResponse bulkResponse) {
//			        System.out.println("success");
//			    }
//
//			    @Override
//			    public void onFailure(Exception e) {
//			        System.out.println("failure");
//			    }
//			};
//			client.bulkAsync(request, listener);		
//		} catch(Exception e) {
//			e.printStackTrace();
//		} finally {
//			client.close();
//		}
	}
}